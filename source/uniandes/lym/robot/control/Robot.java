/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
/* mapa para guardar las variables globales durante la ejecucion del programa */
        private HashMap<String, Integer > userVals = new HashMap< String, Integer>();
        private RobotWorldDec world;
        String salida=new String();
        StringBuffer salidaS;
        Boolean bufferInstanced = false;
        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

//-----------------------------------------------------------------------------------------------
  final public boolean command(StringBuffer sistema) throws ParseException {
                int x;
                salida=new String();
                if(bufferInstanced == false) {
                  salidaS = sistema;
                  bufferInstanced = true;
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE:
    case RIGHT:
    case LEFT:
    case ROTATE:
    case LOOK:
    case DROP:
    case FREE:
    case PICK:
    case POP:
    case CHECK:
    case BLOCKED:
    case NOP:
    case REPEAT:
    case IF:
    case 34:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOVE:
          jj_consume_token(MOVE);
          x = numero();
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          x = numero();
          break;
        case LEFT:
          jj_consume_token(LEFT);
          x = numero();
          break;
        case ROTATE:
          jj_consume_token(ROTATE);
          x = numero();
          break;
        case DROP:
          jj_consume_token(DROP);
          x = numero();
          break;
        case FREE:
          jj_consume_token(FREE);
          x = numero();
          break;
        case PICK:
          jj_consume_token(PICK);
          x = numero();
          break;
        case POP:
          jj_consume_token(POP);
          x = numero();
          break;
        case BLOCKED:
          jj_consume_token(BLOCKED);
          break;
        case NOP:
          jj_consume_token(NOP);
          break;
        case LOOK:
          jj_consume_token(LOOK);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case N:
            jj_consume_token(N);
            break;
          case E:
            jj_consume_token(E);
            break;
          case W:
            jj_consume_token(W);
            break;
          case S:
            jj_consume_token(S);
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case CHECK:
          jj_consume_token(CHECK);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case C:
            jj_consume_token(C);
            break;
          case B:
            jj_consume_token(B);
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          x = numero();
          break;
        case 34:
          block();
          break;
        case REPEAT:
          repeat();
          break;
        case IF:
          conditional();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(33);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOVE:
        case RIGHT:
        case LEFT:
        case ROTATE:
        case LOOK:
        case DROP:
        case FREE:
        case PICK:
        case POP:
        case CHECK:
        case BLOCKED:
        case NOP:
        case REPEAT:
        case IF:
        case 34:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
      }
                  //  try {
              //  Thread.sleep(1);
              //  }catch (InterruptedException e) {
              //   System.err.format("IOException: %s%n", e);
              //  }
                salidaS.append(salida);
                {if (true) return true;}
      break;
    case 33:
      jj_consume_token(33);
               {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                  {if (true) return false;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//void objetoPoner() :
//	{
//		int f=1;	
//	}
//	{
//		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
//		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 
//
//	} 
//
//void objetoRecoger() :
//	{
//		int f=1;	
//	}
//	{
//		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
//		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
//
//	}

        /**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void block() throws ParseException {
    jj_consume_token(34);
    jj_consume_token(BLOCK);
    label_2:
    while (true) {
      command(salidaS);
      jj_consume_token(33);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case MOVE:
      case RIGHT:
      case LEFT:
      case ROTATE:
      case LOOK:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case CHECK:
      case BLOCKED:
      case NOP:
      case REPEAT:
      case IF:
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(35);
  }

  final public void repeat() throws ParseException {
    jj_consume_token(REPEAT);
    numero();
    jj_consume_token(36);
    label_3:
    while (true) {
      command(salidaS);
      jj_consume_token(33);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case MOVE:
      case RIGHT:
      case LEFT:
      case ROTATE:
      case LOOK:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case CHECK:
      case BLOCKED:
      case NOP:
      case REPEAT:
      case IF:
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(37);
  }

  final public void conditional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(BLOCKED);
    jj_consume_token(36);
    label_4:
    while (true) {
      command(salidaS);
      jj_consume_token(33);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case MOVE:
      case RIGHT:
      case LEFT:
      case ROTATE:
      case LOOK:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case CHECK:
      case BLOCKED:
      case NOP:
      case REPEAT:
      case IF:
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(37);
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e00,0xc0000,0x1b3e1f0,0x1b3e1f0,0x1b3e1f1,0x1b3e1f1,0x1b3e1f1,0x1b3e1f1,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x4,0x6,0x6,0x6,0x6,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
