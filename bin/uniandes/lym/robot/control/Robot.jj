/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=2; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{
/* mapa para guardar las variables globales durante la ejecucion del programa */
	private HashMap<String, Integer > userVals = new HashMap< String, Integer>();
/* mapa para guardar las definiciones de las funciones y sus parametros*/
    private HashMap<String,LinkedList<String>> functions = new HashMap<String,LinkedList<String>>();
/* referencia al mundo del robot*/
	private RobotWorldDec world;
/* String de salidas del parsers*/
	String salida=new String();
/* referencia al buffer global donde se van a append todas las salidas del parser*/
	private StringBuffer salidaS;
/* boolean para saber si el buffer global ya fue instanciado (asegura que sea el mismo durante la ejecucion del programa)*/
	Boolean bufferInstanced = false;
                                    
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}
}
PARSER_END(Robot)

SKIP:
{
		" "
	|	"\r"
	|	"\t"
}

/* Definicion de comandos basicos */
TOKEN: 
{
		   <MOVE :  "MOVE">
		|  <RIGHT: "RIGHT">
		|  <LEFT: "LEFT">
		|  <ROTATE: "ROTATE">
		|  < LOOK: "LOOK" >
		|  < N : "N" >
		|  < E : "E" >
		|  < W : "W" >
		|  < S : "S" >
		|  < DROP : "DROP" >
		|  < FREE : "FREE" >
		|  < PICK : "PICK" >
		|  < POP : "POP" >
		|  < CHECK : "CHECK" >
		|  < C : "C" >
		|  < B : "B" >
		|  < BLOCKEDP : "BLOCKEDP" >
		|  < NOP : "NOP" >
		|  < BLOCK : "BLOCK" >
		|  < REPEAT : "REPEAT" >
		|  < IF : "IF" >
		|  < DEFINE : "DEFINE" >
		|  < TO : "TO" >
		|  < OUTPUT : "OUTPUT" >
		|  < END : "END" >
}

TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
	    | <VARIABLE : (< LETTER >)+>
		| <#DIGIT: ["0"-"9"] >
		| <#LETTER: ["a"-"z"]>
} 


//-----------------------------------------------------------------------------------------------

boolean command(StringBuffer sistema):
	{		
		int x;
		salida=new String();
		if(bufferInstanced == false) {
		  salidaS = sistema;
		  bufferInstanced = true;
		}
	}
	{
		 (
		    (
			(    
			   <MOVE>   numero() //{world.moveForward(x);salida = "Command: Moveforward ";}  
	    	|  <RIGHT>  numero() //{world.turnRight();salida = "Command: Turnright";}
			|  <LEFT>   numero()
			|  <ROTATE> numero()
			|  <DROP>   numero()
			|  <FREE>   numero()
			|  <PICK>   numero()
		    |  <POP>    numero() //{world.popBalloons(x); salida = "Comando:  Pop";}
		    |  <BLOCKEDP>
		    |  <NOP>
		    |  <LOOK>   ("N"|"E"|"W"|"S")
		    |  <CHECK>  ("C"|"B") numero()
		    |  block()
		    |  repeat()
		    |  conditional()
		    |  define()
		    |  function()
//		    |  userDefinitions()
			) "\n")
     	|  "\n"
        )+
		{
		  //  try {
	      //  Thread.sleep(1);
	      //  }catch (InterruptedException e) {
	      //   System.err.format("IOException: %s%n", e);
	      //  }
		salidaS.append(salida);
		return true;
		}
	    | <EOF> {return false; }
	}

//void objetoPoner() :
//	{
//		int f=1;	
//	}
//	{
//		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
//		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 
//
//	} 
//
//void objetoRecoger() :
//	{
//		int f=1;	
//	}
//	{
//		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
//		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
//
//	}


/**
* reconoce un numero entero sin signo
* @return el valor entero correspondiente al valor reconocido
* VERIFICA SI LA ENTRADA ES UN NUMERO O UNA VARIABLE PREVIAMENTE DEFINIDA POR EL USUARIO.
*/
int numero() throws Error:
	{	
		Integer total;
	}
	{
		(<NUMERO>| <VARIABLE>)
		{
		  	// si entra al if el numero esta definido por medio de una variable.
		  	total = userVals.get(token.image);
		  	if(total!=null) {
		  	  return total;
		  	}
		  	//si no entonces debe ser un numero explicito.
		  	else {
		  	  	try 
				{
					total = Integer.parseInt(token.image);
					return total;
				} 
				catch (Exception e) 
				{
				  throw new Error("Error al intentar convertir: "+token.image +" en un numero.");
				}
			}
		}
	}

void block():
{
}
{
  "("
  	<BLOCK>
  	 command(salidaS)
  ")"
}

void repeat():
{
}
{
  <REPEAT>
   numero()
  "["
    command(salidaS)
  "]"
}

void conditional():
{
}
{
  <IF>
  <BLOCKEDP>
  "["     command(salidaS)
  "]"
  
}

void define():
{
  String name="";
  Integer value;
}
{
  <DEFINE>
  <VARIABLE>
  {
    name = token.image;
  }
  <NUMERO>
  {
    try {
      value = Integer.parseInt(token.image);
    }
    catch(Exception e) {
      throw new ParseException("Una variable solo puede guardar numeros");
    }
    userVals.put(name, value);
  }
  
}

void function():
{
  String name = "";
  LinkedList<String> params = new LinkedList<String>();
}
{
  <TO>
  <VARIABLE>
  {
    name = token.image;
  }
  (
    ":"<VARIABLE>
    { 
     params.add(":"+token.image);
    }  )*
  {
    //retorna el viejo valor (si ya habia uno con esa misma key) y null si es la primera vez que se inserta.
    if(functions.put(name,params)!=null) {
      throw new ParseException("La funcion: "+ name +" ya fue previamente definida.");
    }
  }
  <OUTPUT>
  command(salidaS)
  <END>
}

//void userDefinitions():
//{
//}
//{
//  {
//    System.out.println(token.image.split(" ")[0]);
////    if(userVals.get(token.image.split(" ")[0])==null && functions.get(token.image.split(" ")[0])==null) {
////      
////    }
//  }
//}
